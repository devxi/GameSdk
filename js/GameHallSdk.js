"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const JSZip = require("JSZip");
var GameHallSdk;
(function (GameHallSdk) {
    GameHallSdk.jszip = null;
    //ÈùôÊÄÅÂ∑•ÂÖ∑Á±ª
    class Tool {
        /**
         * Âà§Êñ≠ÊòØÂê¶ÊòØÊØîËµõÂú∫ ÈÄöËøáÂà§Êñ≠Êü•ËØ¢Â≠óÁ¨¶‰∏≤ÈáåÈù¢ÊòØÂê¶ÊúâseasonId
         *
         * @static
         * @memberof Tool
         */
        static isMatchGame() {
            console.log("hahahah üòÑ");
        }
        /**
         * Ëé∑ÂèñÂÜ≤Ê¶úËµõÂÄçÁéá
         *
         * @static
         * @memberof Tool
         */
        static getMatchGameMutitype() {
        }
        /**
         * ÁªôÂΩìÂâçurlÂ¢ûÂä†‰∏Ä‰∏™Êü•ËØ¢Â≠óÁ¨¶‰∏≤
         *
         * @static
         * @param {string} key Êü•ËØ¢Â≠óÁ¨¶‰∏≤ÂêçÁß∞
         * @param {string} value Êü•ËØ¢Â≠óÁ¨¶‰∏≤ÁöÑÂÄº
         * @memberof Tool
         */
        static appendSearchParam(key, value) {
            let url = new URL(window.location.href);
        }
        /**
         * ‰ªéÂΩìÂâçurlÂà†Èô§‰∏Ä‰∏™‚òùÔ∏èÊü•ËØ¢Â≠óÁ¨¶‰∏≤
         *
         * @static
         * @param {string} key Ë¶ÅÂà†Èô§ÁöÑÊü•ËØ¢Â≠óÁ¨¶‰∏≤ÂêçÁß∞
         * @memberof Tool
         */
        static deleteSearchParam(key) {
        }
        /**
         *
         *  Âä†ËΩΩ‰∏Ä‰∏™jsÊñá‰ª∂ ‰ºöÂú®htmlÈáåÈù¢Áîü‰∫ßscriptÊ†áÁ≠æ Âπ∂ src =url
         * @static
         * @param {*} url jsÁöÑurl
         * @memberof Tool
         */
        static loadJs(url) {
        }
        /**
         *
         * ‰∏ãËΩΩzipÂåÖÔºåÂæóÂà∞zipÂåÖÈáåÈù¢ÁöÑjsÊñá‰ª∂
         * @static
         * @param {string} url
         * @memberof Tool
         */
        static loadZipJs(url, exec = false) {
            let xhr = new XMLHttpRequest();
            // JSZip.loadAsync(url);
        }
    }
    GameHallSdk.Tool = Tool;
    class ZipCodeLoader {
        constructor(codeZips) {
            this.res = {
                downloadProgress: {
                    cur: 0,
                    total: 0,
                    totalProgrss: 0
                },
                unZipProgress: {
                    completed: 0,
                    total: 0,
                },
                codeZips: codeZips
            };
            this.res.downloadProgress.total = this.res.codeZips.length;
            let jsFileNum = 0;
            this.res.codeZips.map(codeZip => {
                if (codeZip.js == null)
                    codeZip.js = {};
                jsFileNum += Object.keys(codeZip.js).length;
                if (codeZip.execAfterLoaded == null)
                    codeZip.execAfterLoaded = true;
            });
            this.res.unZipProgress.total = jsFileNum;
        }
        startDownload(downloadProgress, unzipProgress) {
            let downloadArr = [];
            this.res.codeZips.map(codeZip => {
                downloadArr.push(this.download(codeZip, downloadProgress, unzipProgress));
            });
            Promise.all(downloadArr).then(res => {
                // debugger
            });
        }
        executeCode(url, code) {
            console.log("exec:", url);
            let script = document.createElement('script');
            script.type = 'text/javascript';
            script.text = code;
            script.async = false;
            document.body.appendChild(script);
            //Áî®ÂÆåÂ∞±Âà†
            // document.body.removeChild(script);
        }
        download(codeZip, downloadProgress, unzipProgress) {
            return new Promise((resovle, reject) => {
                let xhr = new XMLHttpRequest();
                xhr.open('GET', codeZip.url, true);
                xhr.responseType = 'arraybuffer';
                xhr.onreadystatechange = () => {
                    if (xhr.readyState === 4) {
                        if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304) {
                            let zipBuffer = xhr.response;
                            let promiseArr = [];
                            JSZip.loadAsync(zipBuffer).then(zipFile => {
                                for (const url in codeZip.js) {
                                    if (codeZip.js.hasOwnProperty(url)) {
                                        const file = zipFile.files[url];
                                        if (!file) {
                                            throw "zipÂåÖ‰∏≠‰∏çÂåÖÂê´ÊåáÂÆöÊñá‰ª∂:" + url;
                                        }
                                        let promise = file.async("text").then(code => {
                                            codeZip.js[url] = code;
                                            this.res.unZipProgress.completed++;
                                            if (unzipProgress)
                                                unzipProgress(this.res.unZipProgress);
                                            return Promise.resolve();
                                        }, err => {
                                            console.error("‰ªézipËß£ÊûêcodeÂ§±Ë¥• code url", url, "err", err);
                                            return Promise.reject(err);
                                        });
                                        promiseArr.push(promise);
                                    }
                                }
                                Promise.all(promiseArr).then(() => {
                                    // debugger
                                    if (codeZip.execAfterLoaded) {
                                        for (const url in codeZip.js) {
                                            if (codeZip.js.hasOwnProperty(url)) {
                                                const code = codeZip.js[url];
                                                this.executeCode(url, code);
                                            }
                                        }
                                    }
                                    return resovle(codeZip.js);
                                }, err => {
                                    console.log(err);
                                    return reject(err);
                                });
                            }, err => {
                                console.error("Âä†ËΩΩ‰ª£Á†ÅzipÂåÖÂá∫Èîô", err);
                                return reject(err);
                            });
                        }
                    }
                };
                xhr.onprogress = (e) => {
                    let pro = e.loaded / e.total;
                    codeZip.progress = pro;
                    this.res.downloadProgress.cur = 0;
                    this.res.codeZips.map(codeZip => {
                        this.res.downloadProgress.cur += codeZip.progress;
                    });
                    this.res.downloadProgress.totalProgrss = this.res.downloadProgress.cur / this.res.downloadProgress.total;
                    console.log("zipÊÄªÂä†ËΩΩËøõÂ∫¶Ôºö", this.res.downloadProgress.totalProgrss);
                    // window.updateTipTxt("Ê∏∏ÊàèÊ≠£Âú®Âä†ËΩΩ‰∏≠..." + progress + "%");
                    if (downloadProgress)
                        downloadProgress(this.res.downloadProgress.totalProgrss);
                };
                xhr.send();
            });
        }
    }
    GameHallSdk.ZipCodeLoader = ZipCodeLoader;
})(GameHallSdk || (GameHallSdk = {}));
window.GameHallSdk = GameHallSdk;
//# sourceMappingURL=GameHallSdk.js.map